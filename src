import java.awt.font.NumericShaper;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
 
public class BipartiteChecker
{
    private int numberOfVertices;
    private Queue<Integer> queue;
 
    public static final int NO_COLOR = 0;
    public static final int RED = 1;
    public static final int BLUE = 2;
    int[] colored ;
    public BipartiteChecker(int numberOfVertices)
    {
    	this.numberOfVertices=numberOfVertices;
        queue = new LinkedList<Integer>();
        colored = new int[numberOfVertices +  1];   
    }
    public boolean isBipartite(int adjacencyMatrix[][], int source)
    {
//    	System.out.print(""+num);
        for (int vertex = 0; vertex <= numberOfVertices; vertex++)
        {
            colored[vertex] = NO_COLOR;
        }
        colored[source] = RED;
        queue.add(source);
 
        int element, neighbour;
        while (!queue.isEmpty())
        {
            element = queue.remove();
            neighbour = 0;
            while (neighbour < numberOfVertices)
            { 
                if (adjacencyMatrix[element][neighbour] == 1 && colored[element]== colored[neighbour])
                {
                    return false;
                }
                if (adjacencyMatrix[element][neighbour] == 1 && colored[neighbour]== NO_COLOR)
                {
                    colored[neighbour] = (colored[element] == RED ) ? BLUE :RED;
                    queue.add(neighbour);
                }
                neighbour++;
            }
        }
        return true;
    }
    public static void main(String []args) throws FileNotFoundException
    {
    	Scanner sc=new Scanner(new File("example1.txt"));
    	if(args.length!=0)
    	{
    		sc=new Scanner(new File(args[0]));
    	}
    	int adjacency_matrix[][] = new int[50 + 1][50+ 1];
    	int maxi=0;
    	while(sc.hasNext())
    	{
    		int a=sc.nextInt();
    		int b=sc.nextInt();
    		adjacency_matrix[a][b] =1;
    		adjacency_matrix[b][a] =1;
    		maxi=Math.max(maxi,a);
    		maxi=Math.max(maxi,b);
    	}
    	BipartiteChecker bfs = new BipartiteChecker(maxi);
    	int flag=0;
    	if (bfs.isBipartite(adjacency_matrix, 0)) 
        {
    		flag=0;
    		System.out.print("[");
    		for(int i=0;i<maxi;i++)
    		{
    			if(bfs.colored[i]==BLUE && flag==1)
    			{
    				System.out.print(","+i);
    			}
    			else if(bfs.colored[i]==BLUE )
    			{
    				System.out.print(i);
    				flag=1;
    			}
    		}
    		System.out.println("]");
    		System.out.print("[");
    		flag=0;
    		for(int i=0;i<maxi;i++)
    		{
    			if(bfs.colored[i]==RED && flag==1)
    			{
    				System.out.print(","+i);
    			}
    			else if(bfs.colored[i]==RED )
    			{
    				System.out.print(i);
    				flag=1;
    			}
    		}
    		System.out.println("]");
            
        } else
        {
            System.out.println("Graph is not bipartite");
        }
    }
}
